_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[20],{W2UQ:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/options/mocks-schema",function(){return n("aY1p")}])},YFqc:function(e,t,n){e.exports=n("cTJO")},aY1p:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return c}));var s=n("nKUr"),o=n("YFqc"),r=n.n(o);function c(){return Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("div",{className:"jumbotron",children:Object(s.jsx)("div",{className:"container",children:Object(s.jsx)("div",{className:"row",children:Object(s.jsxs)("div",{className:"col-lg-8 offset-lg-2",children:[Object(s.jsx)("h1",{className:"display-4",children:"Custom Mocks & Schemas"}),Object(s.jsx)("p",{className:"lead",children:Object(s.jsx)(r.a,{href:"/options",children:Object(s.jsx)("a",{children:"\u2190 Back to all options"})})})]})})})}),Object(s.jsx)("main",{className:"container",children:Object(s.jsx)("div",{className:"row",children:Object(s.jsxs)("div",{className:"col-lg-8 offset-lg-2",children:[Object(s.jsxs)("p",{children:["GraphQL servers work off two main concepts - ",Object(s.jsx)("code",{children:"typeDefs"})," ","and ",Object(s.jsx)("code",{children:"resolvers"}),". Put those together, and you have a"," ",Object(s.jsx)("code",{children:"schema"}),". Pass your ",Object(s.jsx)("code",{children:"schema"})," to GraphQL Firebase, and you have a custom GraphQL server."]}),Object(s.jsxs)("p",{children:["GraphQL Firebase uses"," ",Object(s.jsx)("a",{href:"https://github.com/ardatan/graphql-tools",children:"@graphql-tools"})," ","under the hood, and for convenience, re-exports a few functions so you don't need to bring the package back in (unless you need more from it)."]}),Object(s.jsx)("p",{children:"Here\u2019s an example of how to create a simple schema and pass it to GraphQL Firebase."}),Object(s.jsx)("pre",{className:"bg-light p-3",children:Object(s.jsxs)("code",{children:[Object(s.jsxs)("span",{className:"text-muted",children:["// We use ES6+ and typescript in our projects,",Object(s.jsx)("br",{}),"// but you can adjust this to use commonjs"]}),Object(s.jsx)("br",{}),Object(s.jsx)("br",{}),'import * as functions from "firebase-functions"\n\nimport { GraphQLFirebase, makeExecutableSchema } from "@undefinedai/graphql-firebase"\n\nconst typeDefs = `\n  type Post {\n    id: ID!\n    title: String\n    author: String\n    votes: Int\n  }\n\n  # the schema allows the following query:\n  type Query {\n    posts: [Post]\n  }\n\n  # this schema allows the following mutation:\n  type Mutation {\n    upvotePost (\n      postId: ID!\n    ): Post\n  }`\n\nconst resolvers = {\n  Query: {\n    posts() {\n      return posts;\n    },\n  },\n  Mutation: {\n    upvotePost(_, { postId }) {\n      const post = find(posts, { id: postId });\n      if (!post) {\n        throw new Error(`Couldn\'t find post with id ${postId}`);\n      }\n      post.votes += 1;\n      return post;\n    },\n  }\n}\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\nexport const graphql = functions.https.onRequest(GraphQLFirebase({ schema }))']})}),Object(s.jsxs)("p",{children:["In addition to ",Object(s.jsx)("code",{children:"makeExecutableSchema"}),", we also re-export ",Object(s.jsx)("code",{children:"loadFilesSync"}),", ",Object(s.jsx)("code",{children:"mergeResolvers"}),", and ",Object(s.jsx)("code",{children:"mergeTypeDefs"})," from"," ",Object(s.jsx)("a",{href:"https://github.com/ardatan/graphql-tools",children:"@graphql-tools"})," ","so that you can easily split your typeDefs and resolvers into multiple files. If you need more functionality from that package, you should bring it into your project."]}),Object(s.jsx)("h2",{children:"Adding Custom Mocks"}),Object(s.jsx)("p",{children:"By default, the MockQL server will try to read your typeDefs and supply sensible (albeit boring) mock data values. You can customize this further by passing your own mocks."}),Object(s.jsxs)("p",{children:["For example, say you don\u2019t want each MockQL"," ",Object(s.jsx)("code",{children:"Post"}),' to have a default mock title of "Hello World" (the default mock ',Object(s.jsx)("code",{children:"String"}),"). You can bring in a mock data generator (or supply a custom one) to randomize returned values."]}),Object(s.jsx)("p",{children:"Building on the above example:"}),Object(s.jsx)("pre",{className:"bg-light p-3",children:Object(s.jsxs)("code",{children:['import * as functions from "firebase-functions"\n\nimport { GraphQLFirebase, makeExecutableSchema } from "@undefinedai/graphql-firebase"',Object(s.jsx)("br",{}),Object(s.jsx)("br",{}),Object(s.jsx)("span",{className:"text-muted",children:"// Assuming you bring in the `casual` package"}),Object(s.jsx)("br",{}),'import casual from "casual"',Object(s.jsx)("br",{}),Object(s.jsx)("br",{}),Object(s.jsx)("span",{className:"text-muted",children:"// Same schema creation as above, and then..."}),Object(s.jsx)("br",{}),Object(s.jsx)("br",{}),"const mocks = {\n  Query: () => ({\n    posts: () => new MockList([3, 12]),\n  }),\n  Post: () => ({\n    id: casual.uuid,\n    title: casual.title,\n    author: casual.full_name,\n    votes: casual.integer(from = 0, to = 100)\n  }),\n}\n\nexport const graphql = functions.https.onRequest(GraphQLFirebase({\n  mocks,\n  schema\n}))"]})}),Object(s.jsxs)("p",{children:["In this example, a query to ",Object(s.jsx)("code",{children:"posts"})," will return a list of fake posts between 3 and 12 entries long, and each"," ",Object(s.jsx)("code",{children:"Post"})," will have a randomly generated it, title, author name, and number of likes (between 0 and 100)."]}),Object(s.jsx)("p",{children:"Pretty nifty, eh?"}),Object(s.jsxs)("h2",{children:["Maintaing Resolvers with ",Object(s.jsx)("code",{children:"preserveResolvers"})]}),Object(s.jsxs)("p",{children:["By default, the MockQL server will ",Object(s.jsx)("em",{children:"always"})," return mock data, even if you don\u2019t supply custom mocks and even if you have live, working resolves on your GraphQL server. You can change this behavior with ",Object(s.jsx)("code",{children:"preserveResolvers"}),"."]}),Object(s.jsxs)("p",{children:["If you want the MockQL server to use your actual resolvers when they exist, and to only mock data when a particular resolver doesn\u2019t exist, set ",Object(s.jsx)("code",{children:"preserveResolvers: true"}),"."]}),Object(s.jsx)("pre",{className:"bg-light p-3",children:Object(s.jsxs)("code",{children:[Object(s.jsx)("span",{className:"text-muted",children:"// Keeping the same set-up from above"}),Object(s.jsx)("br",{}),"export const graphql = functions.https.onRequest(GraphQLFirebase({\n  mocks,\n  preserveResolvers: true,\n  schema\n}))"]})}),Object(s.jsx)("p",{children:Object(s.jsx)(r.a,{href:"/options",children:Object(s.jsx)("a",{children:"\u2190 Back to all options"})})})]})})})]})}},cTJO:function(e,t,n){"use strict";var s=n("J4zp"),o=n("284h");t.__esModule=!0,t.default=void 0;var r=o(n("q1tI")),c=n("elyg"),a=n("nOHt"),i=n("vNVm"),l={};function u(e,t,n,s){if((0,c.isLocalURL)(t)){e.prefetch(t,n,s).catch((function(e){0}));var o=s&&"undefined"!==typeof s.locale?s.locale:e&&e.locale;l[t+"%"+n+(o?"%"+o:"")]=!0}}var d=function(e){var t=!1!==e.prefetch,n=(0,a.useRouter)(),o=n&&n.pathname||"/",d=r.default.useMemo((function(){var t=(0,c.resolveHref)(o,e.href,!0),n=s(t,2),r=n[0],a=n[1];return{href:r,as:e.as?(0,c.resolveHref)(o,e.as):a||r}}),[o,e.href,e.as]),h=d.href,p=d.as,f=e.children,j=e.replace,b=e.shallow,m=e.scroll,x=e.locale;"string"===typeof f&&(f=r.default.createElement("a",null,f));var v=r.Children.only(f),O=v&&"object"===typeof v&&v.ref,y=(0,i.useIntersection)({rootMargin:"200px"}),g=s(y,2),w=g[0],k=g[1],L=r.default.useCallback((function(e){w(e),O&&("function"===typeof O?O(e):"object"===typeof O&&(O.current=e))}),[O,w]);(0,r.useEffect)((function(){var e=k&&t&&(0,c.isLocalURL)(h),s="undefined"!==typeof x?x:n&&n.locale,o=l[h+"%"+p+(s?"%"+s:"")];e&&!o&&u(n,h,p,{locale:s})}),[p,h,k,x,t,n]);var N={ref:L,onClick:function(e){v.props&&"function"===typeof v.props.onClick&&v.props.onClick(e),e.defaultPrevented||function(e,t,n,s,o,r,a,i){("A"!==e.currentTarget.nodeName||!function(e){var t=e.currentTarget.target;return t&&"_self"!==t||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey||e.nativeEvent&&2===e.nativeEvent.which}(e)&&(0,c.isLocalURL)(n))&&(e.preventDefault(),null==a&&(a=s.indexOf("#")<0),t[o?"replace":"push"](n,s,{shallow:r,locale:i}).then((function(e){e&&a&&(window.scrollTo(0,0),document.body.focus())})))}(e,n,h,p,j,b,m,x)},onMouseEnter:function(e){(0,c.isLocalURL)(h)&&(v.props&&"function"===typeof v.props.onMouseEnter&&v.props.onMouseEnter(e),u(n,h,p,{priority:!0}))}};return(e.passHref||"a"===v.type&&!("href"in v.props))&&(N.href=(0,c.addBasePath)((0,c.addLocale)(p,"undefined"!==typeof x?x:n&&n.locale,n&&n.defaultLocale))),r.default.cloneElement(v,N)};t.default=d},vNVm:function(e,t,n){"use strict";var s=n("J4zp"),o=n("TqRt");t.__esModule=!0,t.useIntersection=function(e){var t=e.rootMargin,n=e.disabled||!a,o=(0,r.useRef)(),l=(0,r.useState)(!1),u=s(l,2),d=u[0],h=u[1],p=(0,r.useCallback)((function(e){o.current&&(o.current(),o.current=void 0),n||d||e&&e.tagName&&(o.current=function(e,t,n){var s=function(e){var t=e.rootMargin||"",n=i.get(t);if(n)return n;var s=new Map,o=new IntersectionObserver((function(e){e.forEach((function(e){var t=s.get(e.target),n=e.isIntersecting||e.intersectionRatio>0;t&&n&&t(n)}))}),e);return i.set(t,n={id:t,observer:o,elements:s}),n}(n),o=s.id,r=s.observer,c=s.elements;return c.set(e,t),r.observe(e),function(){r.unobserve(e),0===c.size&&(r.disconnect(),i.delete(o))}}(e,(function(e){return e&&h(e)}),{rootMargin:t}))}),[n,t,d]);return(0,r.useEffect)((function(){a||d||(0,c.default)((function(){return h(!0)}))}),[d]),[p,d]};var r=n("q1tI"),c=o(n("0G5g")),a="undefined"!==typeof IntersectionObserver;var i=new Map}},[["W2UQ",0,1,2]]]);